{"version":3,"sources":["redux/Adm-tareas/action.ts","redux/Adm-tareas/reducer.ts","redux/reducers.js","redux/Adm-tareas/saga.ts","redux/sagas.js","redux/store.js","index.tsx","redux/actions.js"],"names":["getTasks","type","GET_TASKS","setTasks","payload","SET_TASKS","addTasks","ADD_TASKS","reOrder","source","destination","draggableId","REORDER","INIT_STATE","data","dataFiltered","dataEstados","Estados","hash","map","item","descripcion","estado","filter","o","ReOrdenar","dataOrder","droppableId","text","changeEstado","reducers","combineReducers","admTareasReducer","state","action","getTasksSaga","watchFetchGetTasks","rootSaga","getTasksPersistidas","a","toDoTasks","call","tasks","tasksUpdated","put","takeLatest","all","fork","admTareasReducerSagas","sagaMiddleware","createSagaMiddleware","middlewares","App","lazy","ReactDOM","render","store","initialState","createStore","composeWithDevTools","compose","applyMiddleware","run","sagas","configureStore","fallback","className","document","getElementById"],"mappings":"+FAAA,mJAQeA,EAAW,WACtB,MAAO,CACLC,KAAMC,MAIGC,EAAW,SAACC,GACvB,MAAO,CACLH,KAAMI,IACND,YAISE,EAAW,SAACF,GACvB,MAAO,CACLH,KAAMM,IACNH,YAISI,EAAU,SAACC,EAAaC,EAAiBC,GACpD,MAAO,CACLV,KAAMW,IACNR,QAAU,CAACK,SAAQC,cAAaC,kB,miBCzB9BE,EAAa,CACjBC,KAAM,GACNC,aAAa,GACbC,YAAY,IAGRC,EAAgB,SAACH,GACrB,IAAII,EAAW,GAGf,OAFqBJ,EAAKK,KAAI,SAACC,GAAe,MAAQ,CAACC,YAAYD,EAAKE,WACxCC,QAAO,SAACC,GAAD,OAAWN,EAAKM,EAAEH,eAAuBH,EAAKM,EAAEH,cAAe,OAgBlGI,EAAY,SAAEhB,EAAcC,EAAiBC,EAAkBG,GAEnE,IAAIY,EAAYZ,GAAQ,GAMxB,OAJIL,EAAOkB,cAAgBjB,EAAYiB,cACrCD,EAjBiB,SAAEhB,EAAiBC,EAAiBG,GASrD,OAPAA,EAAKK,KAAI,SAASC,GACDA,EAARQ,OACKjB,IACVS,EAAKE,OAASZ,EAAYiB,gBAIvBb,EAQKe,CAAcnB,EAAYC,EAAaG,IAG9CY,GChCII,EAJEC,0BAAgB,CAC9BC,iBDoDc,WAAsC,IAArCC,EAAoC,uDAA5BpB,EAAYqB,EAAgB,uCAClD,OAAQA,EAAOjC,MACb,KAAKI,IACH,OAAO,2BAAK4B,GAAZ,IAAmBnB,KAAMoB,EAAO9B,QAASW,aAAcmB,EAAO9B,QAASY,YAAaC,EAAQiB,EAAO9B,WACrG,KAAKG,IACH,OAAO,2BAAM0B,GAAb,IACElB,aAAa,GAAD,mBAAMkB,EAAMlB,cAAZ,CAA0BmB,EAAO9B,YAEjD,KAAKQ,IACH,MAA4CsB,EAAO9B,QAA5CK,EAAP,EAAOA,OAAQC,EAAf,EAAeA,YAAcC,EAA7B,EAA6BA,YAC7B,OAAO,2BAAKsB,GAAZ,IAAoBlB,aAAcU,EAAUhB,EAAQC,EAAaC,EAAasB,EAAMlB,gBACtF,QACE,OAAO,eAAKkB,O,2DEnDRE,G,WAcOC,G,WAIQC,GAtBnBC,EAAmB,uCAAG,sBAAAC,EAAA,+EACnBC,KADmB,2CAAH,qDAIzB,SAAUL,IAAV,yEACqB,OADrB,SAC2BM,YAAKH,GADhC,YACQI,EADR,wBAQI,OALMC,EAAeD,EAAMvB,KACzB,SAACC,GACC,OAAO,eAAKA,MALpB,SAQUwB,YAAIzC,YAASwC,IARvB,8BAUI,OAVJ,UAUUC,YAAIzC,YAAS,KAVvB,wCAcO,SAAUiC,IAAV,iEACL,OADK,SACCS,YAAW3C,IAAWiC,GADvB,uCAIQ,SAAUE,IAAV,iEACb,OADa,SACPS,YAAI,CACPC,YAAKX,KAFK,uC,eChCQC,GAAV,SAAUA,IAAV,iEACb,OADa,SACPS,YAAI,CACTE,MAFY,uCCGf,IAAMC,EAAiBC,cACjBC,EAAc,CAACF,G,YCAfG,EAAMC,gBAAK,kBAAM,sDAEvBC,IAASC,OACP,cAAC,IAAD,CAAUC,MDDL,SAAwBC,GAC7B,IAAMD,EAAQE,sBACZ5B,EACA2B,EACAE,gCAAwBC,kBAAQC,kBAAe,WAAf,EAAmBV,GAAcQ,iCACzCC,kBAAQC,kBAAe,WAAf,EAAmBV,KAIrD,OADAF,EAAea,IAAIC,GACZP,ECRUQ,GAAjB,SACA,cAAC,WAAD,CAAUC,SAAU,qBAAKC,UAAU,YAAnC,SACI,cAACd,EAAD,QAGJe,SAASC,eAAe,U,+BCf1B,kJAAalE,EAAY,YACZG,EAAY,YACZE,EAAY,YACZK,EAAU,Y","file":"static/js/main.02f78493.chunk.js","sourcesContent":["import {\r\n    GET_TASKS,\r\n    SET_TASKS,\r\n    ADD_TASKS,\r\n    REORDER,  \r\n    \r\n  } from '../actions';\r\n  \r\n  export const getTasks = () => {\r\n    return {\r\n      type: GET_TASKS,\r\n    };\r\n  };\r\n  \r\n  export const setTasks = (payload: any) => {\r\n    return {\r\n      type: SET_TASKS,\r\n      payload,\r\n    };\r\n  };\r\n  \r\n  export const addTasks = (payload: any) => {  \r\n    return {\r\n      type: ADD_TASKS,\r\n      payload,\r\n    };\r\n  };\r\n\r\n  export const reOrder = (source: any, destination:any, draggableId:any) => {\r\n    return { \r\n      type: REORDER,\r\n      payload : {source, destination, draggableId}\r\n    };\r\n  };  \r\n \r\n ","import {\r\n    SET_TASKS,\r\n    ADD_TASKS,\r\n    REORDER,   \r\n  } from '../actions';\r\n  \r\n  const INIT_STATE = {\r\n    data: [],\r\n    dataFiltered:[],\r\n    dataEstados:[],\r\n  }; \r\n  \r\n  const Estados:  any = (data:any) => {  \r\n    let hash:any = {};\r\n    const dataFiltrada = data.map((item:any)=>  { return ({descripcion:item.estado })}); \r\n    const dataEstado = dataFiltrada.filter((o:any) => hash[o.descripcion] ? false : hash[o.descripcion] = true);\r\n    return dataEstado;  \r\n  };\r\n    \r\n  const changeEstado = ( destination:any, draggableId:any, data:any)=>{  \r\n  \r\n      data.map(function(item:any){\r\n        const {text} = item;       \r\n        if(text === draggableId){         \r\n          item.estado = destination.droppableId;\r\n        }        \r\n        \r\n      });\r\n      return data;\r\n  };\r\n\r\n  const ReOrdenar = ( source : any, destination:any, draggableId:any,  data:any) => {  \r\n   \r\n    let dataOrder = data || [];\r\n  \r\n    if (source.droppableId !== destination.droppableId){\r\n      dataOrder = changeEstado( destination,draggableId, data);      \r\n    }\r\n\r\n    return dataOrder;\r\n   // public static void reordenar(int[] p, int numero) { //Siendo p[] el array de posiciones y numero la posición del kart que adelanta\r\n      //Tenemos que p = [10,9,8,7,6,5,4,3,2,1] y posicion = 2\r\n  \r\n    //  int aux = p[numero]; //Guardamos el que adelanta en una variable auxiliar\r\n      //En aux guardamos el número 8\r\n  \r\n   //   p[numero] = p[numero-1];\r\n      //Sobreescribimos esa posición con el valor anterior, quedaría así el array\r\n      //p = [10,9,9,7,6,5,4,3,2,1];\r\n  \r\n   //   p[numero - 1] = aux;\r\n      //Sobreescribimos en la posición numero-1 el valor que habíamos guardado\r\n      // Queda así p = [10,8,9,7,6,5,4,3,2,1];\r\n  \r\n  };\r\n\r\n  export default (state = INIT_STATE, action: any) => {\r\n    switch (action.type) {\r\n      case SET_TASKS:        \r\n        return { ...state, data: action.payload, dataFiltered: action.payload, dataEstados: Estados(action.payload)};\r\n      case ADD_TASKS:   \r\n        return {  ...state,\r\n          dataFiltered: [...state.dataFiltered, action.payload]\r\n      } \r\n      case REORDER:       \r\n        const {source, destination , draggableId} = action.payload;\r\n        return { ...state,  dataFiltered: ReOrdenar(source, destination, draggableId, state.dataFiltered)};      \r\n      default:\r\n        return { ...state };\r\n    }\r\n };\r\n  \r\n","import { combineReducers } from 'redux';\r\nimport admTareasReducer from './Adm-tareas/reducer.ts';\r\n\r\nconst reducers = combineReducers({ \r\n   admTareasReducer, \r\n});\r\n\r\nexport default reducers;\r\n\r\n\r\n","import {\r\n    all,\r\n    call,\r\n    fork,\r\n    put,  \r\n    takeLatest,\r\n  } from 'redux-saga/effects';\r\n  import {\r\n    GET_TASKS\r\n  } from '../actions';  \r\n  import { toDoTasks } from '../../AdmTareas/_mock/toDo.json';\r\n  import { setTasks } from './action';  \r\n\r\n  const getTasksPersistidas = async () => { \r\n    return toDoTasks;\r\n  };\r\n\r\n  function* getTasksSaga():any {  \r\n    const tasks :any = yield call(getTasksPersistidas);\r\n    if ( tasks ) {\r\n      const tasksUpdated = tasks.map(\r\n        (item:any) => {\r\n          return { ...item};\r\n        }\r\n      );\r\n      yield put(setTasks(tasksUpdated));\r\n    } else {\r\n      yield put(setTasks([]));\r\n    }\r\n  } \r\n  \r\n  export function* watchFetchGetTasks() {\r\n    yield takeLatest(GET_TASKS, getTasksSaga);\r\n  } \r\n\r\n  export default function* rootSaga() {\r\n    yield all([\r\n       fork(watchFetchGetTasks),      \r\n    ]);\r\n  }","import { all } from 'redux-saga/effects';\r\nimport admTareasReducerSagas from './Adm-tareas/saga.ts';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n   admTareasReducerSagas()\r\n  ]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducers from './reducers';\r\nimport sagas from './sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middlewares = [sagaMiddleware];\r\n\r\nexport function configureStore(initialState) {\r\n  const store = createStore(\r\n    reducers,\r\n    initialState,\r\n    composeWithDevTools() ? compose(applyMiddleware(...middlewares), composeWithDevTools()) \r\n                          : compose(applyMiddleware(...middlewares))\r\n  );\r\n\r\n  sagaMiddleware.run(sagas);\r\n  return store;\r\n}\r\n","\nimport { Suspense, lazy } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './redux/store';\n\nconst App = lazy(() => import(/* webpackChunkName: \"app\" */ './App'));\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n  <Suspense fallback={<div className=\"loading\" />}>\n      <App />     \n    </Suspense>\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n\n","export const GET_TASKS = 'GET_TASKS';\r\nexport const SET_TASKS = 'SET_TASKS';\r\nexport const ADD_TASKS = 'ADD_TASKS';\r\nexport const REORDER = 'REORDER';\r\n\r\nexport * from './Adm-tareas/action.ts';\r\n\r\n"],"sourceRoot":""}