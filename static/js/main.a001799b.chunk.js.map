{"version":3,"sources":["redux/Adm-tareas/action.ts","redux/Adm-tareas/reducer.ts","redux/reducers.js","redux/Adm-tareas/saga.ts","redux/sagas.js","redux/store.js","index.tsx","redux/actions.js"],"names":["getTasks","type","GET_TASKS","setTasks","payload","SET_TASKS","addTasks","ADD_TASKS","reOrder","source","destination","draggableId","REORDER","INIT_STATE","data","dataFiltered","dataEstados","Estados","hash","map","item","descripcion","estado","filter","o","ReOrdenar","dataFiltrada","dataOrder","index","text","changeEstado","i","droppableId","list","startIndex","endIndex","result","splice","removed","OrderData","reducers","combineReducers","admTareasReducer","state","action","getTasksSaga","watchFetchGetTasks","rootSaga","getTasksPersistidas","a","toDoTasks","call","tasks","tasksUpdated","put","takeLatest","all","fork","admTareasReducerSagas","sagaMiddleware","createSagaMiddleware","middlewares","App","lazy","ReactDOM","render","store","initialState","createStore","composeWithDevTools","compose","applyMiddleware","run","sagas","configureStore","fallback","className","document","getElementById"],"mappings":"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","file":"static/js/main.a001799b.chunk.js","sourcesContent":["import {\r\n    GET_TASKS,\r\n    SET_TASKS,\r\n    ADD_TASKS,\r\n    REORDER,  \r\n    \r\n  } from '../actions';\r\n  \r\n  export const getTasks = () => {\r\n    return {\r\n      type: GET_TASKS,\r\n    };\r\n  };\r\n  \r\n  export const setTasks = (payload: any) => {\r\n    return {\r\n      type: SET_TASKS,\r\n      payload,\r\n    };\r\n  };\r\n  \r\n  export const addTasks = (payload: any) => {  \r\n    return {\r\n      type: ADD_TASKS,\r\n      payload,\r\n    };\r\n  };\r\n\r\n  export const reOrder = (source: any, destination:any, draggableId:any) => {\r\n    return { \r\n      type: REORDER,\r\n      payload : {source, destination, draggableId}\r\n    };\r\n  };  \r\n\r\n   \r\n \r\n ","import {\r\n    SET_TASKS,\r\n    ADD_TASKS,\r\n    REORDER,   \r\n  } from '../actions';\r\n  \r\n  const INIT_STATE = {\r\n    data: [],\r\n    dataFiltered:[],\r\n    dataEstados:[],\r\n  }; \r\n  \r\n  const Estados:  any = (data:any) => {  \r\n    let hash:any = {};\r\n    const dataFiltrada = data.map((item:any)=>  { return ({descripcion:item.estado })}); \r\n    const dataEstado = dataFiltrada.filter((o:any) => hash[o.descripcion] ? false : hash[o.descripcion] = true);\r\n    return dataEstado;  \r\n  };\r\n    \r\n  const changeEstado = (index:any, dataFiltrada:any, estado:any)=>{\r\n      const {text} = index;      \r\n      dataFiltrada.map(function(item:any){\r\n        if(item.text === text){         \r\n          item.estado = estado;\r\n        }           \r\n      });\r\n      return dataFiltrada;\r\n  };\r\n\r\n  const OrderData = (list:any, startIndex:any, endIndex:any) => {\r\n    const result = [...list];\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n    return result;\r\n  };\r\n\r\n  const ReOrdenar = ( source : any, destination:any, draggableId:any,  dataFiltrada:any) => { \r\n    let dataOrder = [...dataFiltrada];\r\n    const itemRemove = dataFiltrada.filter((i:any) =>i.text ===draggableId);   \r\n    changeEstado(itemRemove[0], dataOrder, destination.droppableId); \r\n    OrderData(dataOrder, source.index, destination.index);\r\n    return  dataOrder;   \r\n  };\r\n\r\n  export default (state = INIT_STATE, action: any) => {\r\n    switch (action.type) {      \r\n      case SET_TASKS:            \r\n        return { ...state, data:  action.payload, dataFiltered: action.payload, dataEstados: Estados(action.payload)};\r\n      case ADD_TASKS:   \r\n        return {  ...state,\r\n          dataFiltered: [...state.dataFiltered, action.payload]\r\n      } \r\n     case REORDER:       \r\n        const {source, destination , draggableId} = action.payload;       \r\n        const data = state.dataFiltered;\r\n        return { ...state,  dataFiltered: ReOrdenar(source, destination, draggableId, data)};      \r\n      default:\r\n        return { ...state };\r\n    }\r\n };\r\n  \r\n","import { combineReducers } from 'redux';\r\nimport admTareasReducer from './Adm-tareas/reducer.ts';\r\n\r\nconst reducers = combineReducers({ \r\n   admTareasReducer, \r\n});\r\n\r\nexport default reducers;\r\n\r\n\r\n","import {\r\n    all,\r\n    call,\r\n    fork,\r\n    put,  \r\n    takeLatest,\r\n  } from 'redux-saga/effects';\r\n  import {\r\n    GET_TASKS\r\n  } from '../actions';  \r\n  import { toDoTasks } from '../../AdmTareas/_mock/toDo.json';\r\n  import { setTasks } from './action';  \r\n\r\n  const getTasksPersistidas = async () => { \r\n    return toDoTasks;\r\n  };\r\n\r\n  function* getTasksSaga():any {  \r\n    const tasks :any = yield call(getTasksPersistidas);\r\n    if ( tasks ) {\r\n      const tasksUpdated = tasks.map(\r\n        (item:any) => {\r\n          return { ...item};\r\n        }\r\n      );\r\n      yield put(setTasks(tasksUpdated));\r\n    } else {\r\n      yield put(setTasks([]));\r\n    }\r\n  } \r\n  \r\n  export function* watchFetchGetTasks() {\r\n    yield takeLatest(GET_TASKS, getTasksSaga);\r\n  } \r\n\r\n  export default function* rootSaga() {\r\n    yield all([\r\n       fork(watchFetchGetTasks),      \r\n    ]);\r\n  }","import { all } from 'redux-saga/effects';\r\nimport admTareasReducerSagas from './Adm-tareas/saga.ts';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n   admTareasReducerSagas()\r\n  ]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducers from './reducers';\r\nimport sagas from './sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middlewares = [sagaMiddleware];\r\n\r\nexport function configureStore(initialState) {\r\n  const store = createStore(\r\n    reducers,\r\n    initialState,\r\n    composeWithDevTools() ? compose(applyMiddleware(...middlewares), composeWithDevTools()) \r\n                          : compose(applyMiddleware(...middlewares))\r\n  );\r\n\r\n  sagaMiddleware.run(sagas);\r\n  return store;\r\n}\r\n","\r\nimport { Suspense, lazy } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { configureStore } from './redux/store';\r\n\r\nconst App = lazy(() => import(/* webpackChunkName: \"app\" */ './App'));\r\n\r\nReactDOM.render(\r\n  <Provider store={configureStore()}>\r\n  <Suspense fallback={<div className=\"loading\" />}>\r\n      <App />     \r\n    </Suspense>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n","export const GET_TASKS = 'GET_TASKS';\r\nexport const SET_TASKS = 'SET_TASKS';\r\nexport const ADD_TASKS = 'ADD_TASKS';\r\nexport const REORDER = 'REORDER';\r\n\r\nexport * from './Adm-tareas/action.ts';\r\n\r\n"],"sourceRoot":""}