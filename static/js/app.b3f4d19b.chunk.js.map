{"version":3,"sources":["AdmTareas/components/conteiner-taks.jsx","components/common/styled-button.jsx","components/common/button-round-styled.tsx","components/common/titulo.jsx","AdmTareas/components/add-task.jsx","AdmTareas/components/title-pantalla.jsx","AdmTareas/abm-tasks.jsx","App.js"],"names":["ConteinerTasks","dispatch","useDispatch","useSelector","state","admTareasReducer","tareas","dataFiltered","estados","dataEstados","useEffect","getTasks","Row","className","onDragEnd","result","source","destination","draggableId","index","droppableId","reOrder","map","item","descripcion","Col","droppableProvided","droppableProps","ref","innerRef","filter","s","estado","item2","index2","text","draggableProvided","draggableProps","dragHandleProps","placeholder","StyleButton","styled","Button","ButtonRoundStyled","props","value","onClick","disabled","TituloTexto","span","ModalNuevaTarea","abrirModal","handlerOpenModal","useState","setDescripcion","Modal","isOpen","ModalHeader","ModalBody","Input","maxLength","name","onChange","e","target","handleValue","ModalFooter","addTasks","TitlePantalla","openModal","setOpenModal","AbmTasks","App"],"mappings":"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","file":"static/js/app.b3f4d19b.chunk.js","sourcesContent":["import { useEffect  } from \"react\";\r\nimport {useSelector, useDispatch } from 'react-redux';\r\nimport { Row, Col} from 'reactstrap';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { getTasks, reOrder } from '../../redux/Adm-tareas/action.ts';\r\n\r\nconst ConteinerTasks= () => {\r\n  const dispatch = useDispatch(); \r\n  const {\r\n    dataFiltered: tareas,\r\n    dataEstados : estados \r\n  } = useSelector((state) => state.admTareasReducer);\r\n\r\n  const handleOnDragEnd = (result) => {    \r\n    const { source, destination, draggableId } = result;\r\n    if (!destination) {\r\n      return;\r\n    }                                \r\n    if ( source.index === destination.index && source.droppableId === destination.droppableId) {\r\n      return;\r\n    }     \r\n    dispatch(reOrder( source, destination, draggableId));\r\n  } \r\n\r\n  useEffect(() => {\r\n    dispatch(getTasks());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <Row className=\"p-3\">        \r\n          <DragDropContext onDragEnd = {handleOnDragEnd} >\r\n            {estados.map((item, index) => {               \r\n              const {descripcion} = item ||{};   \r\n               return (                \r\n                  <Col className=\"p-2\">                 \r\n                  <h1>{descripcion}</h1>\r\n                  <Droppable index ={index} droppableId={descripcion} className=\"task-container\">\r\n                    {(droppableProvided) => (\r\n                      <ul\r\n                        {...droppableProvided.droppableProps}\r\n                        ref={droppableProvided.innerRef}\r\n                        className=\"task-container\"\r\n                      >            \r\n                        {tareas.filter(s => s.estado === descripcion).map((item2, index2) => {\r\n                          const {text} = item2 ||{};   \r\n                          return( \r\n                                      \r\n                            \r\n                            <Draggable key={text} draggableId={text} index={index2} className=\"align-center\"\r\n                            >\r\n                              {(draggableProvided) => (\r\n                                <>\r\n                              \r\n                                    <li\r\n                                      {...draggableProvided.draggableProps}\r\n                                      ref={draggableProvided.innerRef}\r\n                                      {...draggableProvided.dragHandleProps\r\n                                      }\r\n                                      className={\"task-item-\"+(descripcion===\"Sin Realizar\"?\"todo\":\r\n                                      (descripcion===\"En Proceso\"?\"doing\":\"done\"))                                      \r\n                                      }\r\n                                    >\r\n                                      \r\n                                      {text}\r\n                                    \r\n                                      </li>    \r\n                                     \r\n                                     </>   \r\n                              )}   \r\n                                            \r\n                            </Draggable>\r\n                             \r\n                             \r\n                          )                \r\n                        })}\r\n                        {droppableProvided.placeholder}\r\n                      </ul>\r\n                    )}\r\n                  </Droppable>\r\n                \r\n                </Col>\r\n                \r\n                  )\r\n                })}\r\n            </DragDropContext>\r\n      \r\n      </Row>\r\n    </>\r\n  )\r\n}\r\nexport default ConteinerTasks;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import styled from 'styled-components';\r\nimport {Button} from 'reactstrap';\r\n\r\n\r\n    const StyleButton = styled(Button)`\r\n    background-color: #4CAF50;\r\n    width: 50px;\r\n    height: 50px;\r\n    border: none;\r\n    padding: 0;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    text-color: black;\r\n    align-items: center;   \r\n  `;\r\n  export default StyleButton;\r\n\r\n /* &:hover {\r\n    background-color: red;\r\n    color: black;\r\n  }\r\n  &:active {\r\n    background-color: red !important;* */","import StyleButton from './styled-button';\r\n\r\ninterface Props {  \r\n  value: string;\r\n  onClick: any;  \r\n  disabled?:boolean;\r\n\r\n}\r\nconst ButtonRoundStyled: React.FC<Props> = (props) => {\r\n  return (\r\n    <StyleButton\r\n      {...props}     \r\n      value={props.value? props.value: ''}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >+</StyleButton>\r\n  );\r\n};\r\nexport default ButtonRoundStyled;\r\n\r\n","import styled from 'styled-components';\r\n\r\nexport const TituloTexto = styled.span`\r\n  background-color: #4CAF50;\r\n  font-size: 2rem;\r\n  border-radius: 10px;\r\n  color: white;\r\n  margin: 0.5rem;\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n  margin-top: 25px; \r\n`;\r\n\r\n\r\n","import {useState} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, Input, Modal, ModalHeader, ModalBody, ModalFooter, Row, Col } from 'reactstrap';\r\nimport { addTasks } from '../../redux/Adm-tareas/action.ts';\r\nimport {TituloTexto} from '../../components/common/titulo';\r\n\r\nconst ModalNuevaTarea = ({\r\n  abrirModal,\r\n  handlerOpenModal,  \r\n}) => {\r\n  const [descripcion, setDescripcion] = useState();\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = () => {\r\n    handlerOpenModal(false);\r\n  };\r\n\r\n  const handleAgregar = () =>{    \r\n      dispatch(addTasks({text: descripcion, estado: \"Sin Realizar\"}));\r\n      handlerOpenModal(false); \r\n  };\r\n  \r\n  const handleValue = (e) =>{\r\n    setDescripcion(e.target.value);\r\n  };\r\n\r\n  return (\r\n   <Modal isOpen={abrirModal}> \r\n      <ModalHeader>\r\n        <TituloTexto>Tarea Nueva</TituloTexto>\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Row>       \r\n          <Col>           \r\n            <Input className=\"p-1\"\r\n              maxLength=\"25\"\r\n              name=\"descripcion\"\r\n              value={descripcion}\r\n              onChange={(e) =>    \r\n                handleValue(e)\r\n              }             \r\n            />\r\n          </Col>\r\n        </Row>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Row>\r\n          <Col className=\"text-center\">\r\n            <Button onClick={handleAgregar} disabled={!descripcion}>\r\n              Aceptar\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button onClick={handleClose}>\r\n              Cancelar\r\n            </Button>\r\n          </Col>        \r\n        </Row>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalNuevaTarea;\r\n\r\n","import { useState} from 'react';\r\nimport ButtonRoundStyled from '../../components/common/button-round-styled';\r\nimport { Row, Col} from \"reactstrap\";\r\nimport ModalNuevaTarea from './add-task';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst TitlePantalla= () => {  \r\n  const [openModal, setOpenModal] = useState(false);  \r\n  const HandleModal = () => {    \r\n    setOpenModal(true);\r\n  };\r\n\r\n  return (  \r\n    <> \r\n      <Row className=\"p-3\"> \r\n        <Col>       \r\n          <h1 className=\"text-center\">Administrador de Tareas <ButtonRoundStyled  onClick={HandleModal} /></h1> \r\n        </Col>       \r\n      </Row> \r\n      <ModalNuevaTarea\r\n        abrirModal={openModal}\r\n        handlerOpenModal={setOpenModal}\r\n      />\r\n    </>     \r\n  )\r\n}\r\nexport default TitlePantalla;","import ConteinerTasks from './components/conteiner-taks';\r\nimport TitlePantalla from './components/title-pantalla';\r\n\r\nconst AbmTasks= () => { \r\n  return (  \r\n     <> \r\n      <TitlePantalla/>   \r\n      <ConteinerTasks/>  \r\n    </>     \r\n  )\r\n}\r\nexport default AbmTasks;","import AbmTasks from './AdmTareas/abm-tasks.jsx';\n\nconst App= () => {  \n  return (     \n    <AbmTasks/>\n  )\n}\nexport default App;\n\n\n"],"sourceRoot":""}